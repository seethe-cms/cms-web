{"version":3,"file":"delta-router.js","sourceRoot":"","sources":["../../src/elements/router/delta-router.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAO,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEnE,2DAA2D;AAE3D;;;;;GAKG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAUvC;QACE,KAAK,EAAE,CAAC;QAHV,iBAAY,GAAG,OAAO,CAAC,KAAK,CAAC;QAI3B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;YACnC,8BAA8B;YAC9B,MAAM,aAAa,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;YACrB,IAAI,MAAM,YAAY,WAAW,EAAE;gBACjC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC/B,MAAM,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;oBACpD,OAAO,KAAK,OAAO,CAAC;gBACtB,CAAC,CAAC,CAAC;gBACH,IAAI,OAAO,KAAK,GAAG,IAAI,cAAc,EAAE;oBACrC,sBAAsB;iBACvB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;;QACJ,MAAM,YAAY,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,YAAY,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,EAAE;YAC5D,gBAAgB;SACjB;QACD,wDAAwD;QACxD,yCAAyC;QACzC,OAAO,IAAI,CAAA,gBAAgB,IAAI,CAAC,YAAY,YAAY,CAAC;IAC3D,CAAC;CACF,CAAA;AAjCC;IADC,QAAQ,EAAE;0CACiB;AAG5B;IADC,KAAK,EAAE;+CACqB;AARlB,SAAS;IADrB,aAAa,CAAC,cAAc,CAAC;GACjB,SAAS,CAsCrB;SAtCY,SAAS","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { Router } from '@vaadin/router';\n//import { ifDefined } from 'lit/directives/if-defined.js';\n\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('delta-router')\nexport class MyElement extends LitElement {\n  /**\n   * Base URl\n   */\n  @property()\n  baseURL: string | undefined;\n\n  @state()\n  currentState = history.state;\n\n  constructor() {\n    super();\n    this.addEventListener('click', (e) => {\n      //TODO: this shouldn't be here\n      const customAnchors = ['', ''];\n      const { target } = e;\n      if (target instanceof HTMLElement) {\n        const tagName = target.tagName;\n        const isCustomAnchor = customAnchors.some((element) => {\n          tagName === element;\n        });\n        if (tagName === 'A' || isCustomAnchor) {\n          // do some Router shit\n        }\n      }\n    });\n  }\n\n  render() {\n    const baseURLParts = this.baseURL?.split('/');\n    const URLParts = location.pathname.split('/');\n    if (baseURLParts === URLParts.slice(0, baseURLParts?.length)) {\n      //TODO: do stuff\n    }\n    //history.pushState(undefined, document.title, '/yesy');\n    //import('../elements/delta-content.js');\n    return html` <slot name=\"${this.currentState}\"></slot> `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'delta-router': MyElement;\n  }\n}\n"]}