{"version":3,"file":"delta-button.js","sourceRoot":"","sources":["../src/elements/delta-button.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AA0EzD;;;;;GAKG;AAEH,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,UAAU;IAA3C;;QA6CE,aAAQ,GAAG,KAAK,CAAC;QAGjB,YAAO,GAAG,KAAK,CAAC;QAIR,UAAK,GAAG,cAAc,CAAC;IAcjC,CAAC;IARC,wDAAwD;IACxD,MAAM;QACJ,OAAO,IAAI,CAAA;sBACO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;;;KAGrC,CAAC;IACJ,CAAC;CACF,CAAA;AAjEQ,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyClB,CAAC;AAGF;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;6CACX;AAGjB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;4CACZ;AAIhB;IAFC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;0CAEhB;AAI/B;IADC,QAAQ,CAAC,EAAE,CAAC;yCACkB;AAxDpB,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CAkEvB;SAlEY,WAAW","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ntype Role =\n  | 'button'\n  | 'checkbox'\n  | 'gridcell'\n  | 'link'\n  | 'menuitem'\n  | 'menuitemcheckbox'\n  | 'menuitemradio'\n  | 'option'\n  | 'progressbar'\n  | 'radio'\n  | 'scrollbar'\n  | 'searchbox'\n  | 'separator'\n  | 'slider'\n  | 'spinbutton'\n  | 'switch'\n  | 'tab'\n  | 'tabpanel'\n  | 'textbox'\n  | 'treeitem'\n  | 'combobox'\n  | 'grid'\n  | 'listbox'\n  | 'menu'\n  | 'menubar'\n  | 'radiogroup'\n  | 'tablist'\n  | 'tree'\n  | 'treegrid'\n  | 'application'\n  | 'article'\n  | 'cell'\n  | 'columnheader'\n  | 'definition'\n  | 'directory'\n  | 'document'\n  | 'feed'\n  | 'figure'\n  | 'group'\n  | 'heading'\n  | 'img'\n  | 'list'\n  | 'listitem'\n  | 'math'\n  | 'none'\n  | 'note'\n  | 'presentation'\n  | 'row'\n  | 'rowgroup'\n  | 'rowheader'\n  | 'separator'\n  | 'table'\n  | 'term'\n  | 'toolbar'\n  | 'tooltip'\n  | 'banner'\n  | 'complementary'\n  | 'contentinfo'\n  | 'form'\n  | 'main'\n  | 'navigation'\n  | 'region'\n  | 'search'\n  | 'alert'\n  | 'log'\n  | 'marquee'\n  | 'status'\n  | 'timer'\n  | 'alertdialog'\n  | 'dialog';\n\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('delta-button')\nexport class DeltaButton extends LitElement {\n  static styles = css`\n    /*:host *,\n    :host *::before,\n    :host *::after {\n      box-sizing: inherit;\n    }\n    */\n    :host {\n      all: inherit !important;\n      display: contents !important;\n    }\n\n    button {\n      display: inline-block;\n      border-radius: 6px;\n      user-select: none;\n      cursor: pointer;\n      box-sizing: border-box;\n      /*transition: background-color 0.2s;*/\n      background-color: var(--delta-button-background-color, #ab46b4);\n      padding: 12px 20px;\n      text-align: center;\n      font-size: var(--delta-button-font-size, 1rem);\n      font-weight: var(--delta-button-font-weight, 600);\n      border: none;\n      margin: 0;\n      vertical-align: 0;\n    }\n    :host([outlined]:hover) > button {\n      background-color: var(--delta-button-background-color-hover, #a920ad);\n    }\n    :host([outlined]) > button {\n      border: solid;\n      border-color: var(--delta-button-background-color, #ab46b4);\n      border-width: 0.25rem;\n      background-color: transparent;\n      outline: none;\n    }\n    button:focus {\n      box-shadow: 0 0 0 4px rgb(169, 32, 173, 0.5);\n    }\n  `;\n\n  @property({ type: Boolean })\n  outlined = false;\n\n  @property({ type: Boolean })\n  shallow = false;\n\n  @property({ reflect: true, attribute: 'role' })\n  // @ts-expect-error: Unused Locals\n  private _role = 'presentation';\n\n  //TODO replace with role=\"${ifDefined(this.role)}\", ifDefined currently removes the whole element, lit bug?\n  @property({})\n  private role: Role | undefined;\n\n  //class=\"${this.outlined ? 'outlined' : 'not-outlined'}\"\n  render() {\n    return html`\n      <button role=\"${ifDefined(this.role)}\" part=\"main\">\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'delta-button': DeltaButton;\n  }\n}\n"]}