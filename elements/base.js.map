{"version":3,"file":"base.js","sourceRoot":"","sources":["../src/elements/base.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,gBAAgB,CAAC;AACxB;;;;GAIG;AAEH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD,iEAAiE;AACjE;;;;;GAKG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAoDvC,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsCV,CAAC;IACJ,CAAC;CACF,CAAA;AA5FQ,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkDlB,CAAC;AAnDS,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA6FrB;SA7FY,SAAS","sourcesContent":["import './delta-button';\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { LitElement, html, css } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n//TODO \"/dev\" should be dynamic, based on vaadin-router \"baseURL\"\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('delta-base')\nexport class MyElement extends LitElement {\n  static styles = css`\n    header > nav {\n      color: black;\n      background-color: #9999ff;\n      display: flex;\n      padding-left: 200px;\n      padding-right: 200px;\n    }\n    header > nav > * {\n      all: unset;\n      padding-left: 30px;\n      padding-right: 30px;\n      padding-top: 15px;\n      padding-bottom: 15px;\n    }\n    header > nav > *:hover {\n      cursor: pointer;\n      background-color: #6600ff;\n    }\n    header > nav > *:focus {\n      cursor: pointer;\n      background-color: #a200ff;\n    }\n    ul,\n    ul * {\n      all: unset;\n    }\n    ul {\n      display: flex;\n      flex-direction: column;\n      gap: 30px;\n    }\n    #categories > h1 {\n      margin-top: 50px;\n      margin-bottom: 50px;\n      /* TODO: temporary color for differenciation */\n      color: red;\n    }\n    #page-header {\n      background-color: grey;\n      padding: 25px;\n      display: flex;\n      flex-direction: column;\n      align-items: flex-end;\n    }\n    #page-header > div {\n      width: fit-content;\n      display: flex;\n      gap: 40px;\n    }\n  `;\n  render() {\n    return html`\n      <header>\n        <!-- TODO: Make this an element -->\n        <nav>\n          <a href=\"/dev/\">Content Model</a>\n          <a href=\"/dev/a\">Content</a>\n          <a href=\"/dev/b\">Workflow</a>\n          <a href=\"/dev/c\">Media</a>\n        </nav>\n        <!-- -->\n      </header>\n      <div id=\"page-header\">\n        <div role=\"presentation\">\n          <delta-button outlined>Add content category</delta-button>\n          <delta-button>Add content type</delta-button>\n        </div>\n      </div>\n      <main>\n        <div id=\"categories\">\n          <!-- TODO: look for better html tag for title semantics -->\n          <h1>Categories</h1>\n          <ul>\n            <li>\n              <a href=\"/dev/\">Cat 1</a>\n            </li>\n            <li>\n              <a href=\"/dev/a\">Cat 2</a>\n            </li>\n            <li>\n              <a href=\"/dev/b\">Cat 3</a>\n            </li>\n            <li>\n              <a href=\"/dev/c\">Cat 4</a>\n            </li>\n          </ul>\n        </div>\n        <slot></slot>\n      </main>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'delta-base': MyElement;\n  }\n}\n"]}